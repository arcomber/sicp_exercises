Section 1.1
-----------

Ex 1.2

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))

=  - 37
    ---
    150

numerator = 14 4/5

denominator = -60


Ex 1.3

(define (sum_sq_largest x y z)
       (cond ((and (< x y) (< x z)) (+ (square y) (square z)))
             ((and (< y x) (< y z)) (+ (square x) (square z)))
             (else (+ (square x) (square y)))))


Ex 1.4

(define (a-plus-abs-b a b)
  (
    (if (> b 0) + 
                -)
       a b)
  )

I think that if (> b 0) condition means + is used otherwise - is used.

So using substitution model:

(a-plus-abs-b 2 3)
(+ 2 3)
5

or alternatively:
(a-plus-abs-b 2 -3)
(- 2 -3)
5

ie 2 - -3

I think the key thing here is that there are two steps above.  First the check whether b is +ve or -ve then 
the corresponding addition or subtraction of a and b

Ex 1.5

The key to answering this question is understanding (define (p) (p))

This function evaluates to ... itself.  so it recursively keeps calling itself - so it never ends.

Therefore, behaviour will be different for normal order and applicative order.

With applicative order, the arguments are evaluated before the function body.  hence (test 0 (p)) will 
evaluate (p) before any of its body and hence be stuck in an endless loop.  So if the lisp interpreter you 
are using was using applicative order, the function would never return - and no output.

If however, the intepreter used normal order, whereby we expand and apply then performing the necessary steps we get:

1. (test 0 (p))
2. (test (if ... etc) (p))
     the if chooses the option with first zero which does not require y to be evaluated and so (p) is not 
     required to be evaluated.  In which case the function would return zero.


Ex 1.6

If you read section 1.1.6 it says:

"Conditional expressions are evaluated as follows. The predicate <p1> is evaluated first. If its value 
is false, then <p2> is evaluated. If <p2>'s value is also false, then <p3> is evaluated. This process 
continues until a predicate is found whose value is true, in which case the interpreter returns the 
value of the corresponding consequent expression <e> of the clause as the value of the conditional 
expression. If none of the <p>'s is found to be true, the value of the cond is undefined."

The key thing here is that the predicate is evaluated and only if true is the expression evaluated.

However, as we know from ex 1.5, the lisp interpreter uses applicative order. This means that ALL the parameters 
are evaluated BEFORE applying the function body.

if does the right thing and first evaluates the guess and either returns guess or calls sqrt-iter.

However, new-if is a function and so the parameters are supposed to be evaluated BEFORE the function body can be called.

if is a special form where applicative order is NOT used.  That is why lisp needs the if as a special form.

Ex 1.7

For calculating really small numbers, the choice of 1 as a starting point means that the guess will need to 
converge down to the number.  The guess will have to drift down to the actual number then go lower.  It would 
be better with numbers < 1 to start guess at x.

The same logic will apply to really large numbers.  There will be a lot of guesses required to drift upwards 
from 1 to the square root of a really large number.  The point was made in the question about precision. 
I assume this means that for very large numbers the integer part of the number will require much of the 
precision bits and so there will be less precision for the floating point part.


Next part of question is how to write a sqrt solution where good-enough? is changed to check the difference 
between guesses.  I found the tricky part was in updating the old-guess.  I worked out that passing the 
sqrt-iter old-guess param as new-guess works.  ie old-guess in new iteration will be previous new-guess!

Here is my attempt:

(define (sqrt2 x)
  (define (small-change? guess previous-guess)
    (< (abs (- guess previous-guess)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter new-guess old-guess)
    (if (small-change? new-guess old-guess)
        new-guess
        (sqrt-iter (improve new-guess) new-guess)))
  (sqrt-iter 1.0 0.0))

It was tricky because if you are used to imperative programming you could just create an old-guess variable 
in a function and update it.  Functional programming doesn't seem to use the assignment to a variable much.

I did jump ahead in the book and read about block structure and free variables.  So this code would be different 
if I hadn't read that.

Results are more precise for small numbers.  I didn't notice any difference with large numbers.

Ex 1.8:

The exercises vary a lot in difficulty.  This was pretty straightforward, just work out the formula in lisp.

This solution uses the block structure described in 1.1.8 page 30.

(define (cuberoot x)
  (define (cube a)
    (* a a a))
  (define (good-enough? guess x)
    (< (abs (- (cube guess) x)) 0.001))
  (define (improve guess x)
    (/ (+ (/ x (* guess guess)) (* 2.0 guess)) 3.0)) 
  (define (cuberoot-iter guess x)
    (if (good-enough? guess x)
        guess
        (cuberoot-iter (improve guess x) x)))
  (cuberoot-iter 1.0 x))
  
  This next solution uses the free variable concept also described in 1.1.8:
  
(define (cuberoot x)
  (define (cube a)
    (* a a a))
  (define (good-enough? guess)
    (< (abs (- (cube guess) x)) 0.001))
  (define (improve guess)
    (/ (+ (/ x (* guess guess)) (* 2.0 guess)) 3.0)) 
  (define (cuberoot-iter guess)
    (if (good-enough? guess)
        guess
        (cuberoot-iter (improve guess))))
  (cuberoot-iter 1.0))
  
  See how x is defined in the outer cuberoot function as a formal parameter.  x is then accessible as a 
  free variable to the nested functions.
  
  
Section 1.2
-----------

Ex 1.9

Using substitution model for first + function:
(+ 4 5)
(inc (+ 3 5))
(inc (inc 2 +5))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
 => 9

The shape of this process is similar to figure 1.3 for the recursive factorial process.  ie there is a expansion followed by contraction.  This is a recursive process.

The 2nd form is a linear iterative process.  The substitution:

(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
(9)
 => 9


Ex 1.10

(A 1 10) =>  1024
(A 2 4)  => 65536
(A 3 3)  => 65536

(f n) == 2n
(g n) == 2^n  (2^0 doesn't work)
(h n) => hmmm

(h n) is hard.

Trying a few values:

h(0) == 0  == 0
h(1) == 2  == 2^1
h(2) == 4  == 2^2
h(3) == 16    == 2^4
h(4) == 65536  == 2^16

so what is relationship here?

1 -> 2^1
2 -> 2^2
3 -> 2^4
4 -> 2^16

1 -> 1
2 -> 2
3 -> 4
4 -> 16

Hmmmm!

h(1) == 2  == 2^1     == 2^(2^0)
h(2) == 4  == 2^2     == 2^(2^1)
h(3) == 16    == 2^4   == 2^(2^(2^1))
h(4) == 65536  == 2^16  == 2^(2^(2^(2^1)))

No idea if that is answer!

Ex 1.11

In the recursive case there is additional 'hidden' information between recursive steps which must be maintained 
by the interpreter. the longer the chain, the more info must be maintained.

However, with the iterative example, the program variables maintain the state between recursive steps. 
no 'hidden' info required and so as the number of iterations grow no 'extra' information must be maintained 
by the interpreter.

Obviously the iterative process solution is MUCH more scalable than the recursive process version.

Writing the recursive process version is fairly easy and simply involves recoding the maths syntax into lisp as in:

(define (f n)
  (if (< n 3) n
      (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))))

The next part of the questino is to convert into an iterative solution.  This can be difficult at first.  so 
to work up to a solution lets work on some simpler solutions to get the 'knack' of how to do it.  We 
start by writing a recursive process solution, study it and then re-work as iterative.

First lets try a factorial.

(define (fact n)
  (if (< n 2) 1
    (* n (fact (- n 1)))))

To change to iterative we add an accumulator for the result as a parameter.  you can think of this 
accumulator as a variable in the program which removes the requirement for the interpreter to internally 
hold this information.

So iterative version.

(define (facti n)
  (define (f-iter n acc)
    (if (< n 2) acc
      (f-iter (- n 1) (* n acc))))
    (f-iter n 1))

Three notable changes as follows:
A) nested inner iterative function.  This is really only to make the interface easier to call for users.  
You wouldn't want to make users call the less convenient f-iter function directly.
B) acc variable used as internal accumulator.  It is a running total of the favctorial.  ie factorial 5 
will be 5 -> iteration 1, 20 -> iteration 2, 60 -> iteration 3, 120 -> iteration 4.
C) terminating check return accumulator value.

Programmers from an imperative background might notice that no 'mutable' variables are used.  acc takes 
it place but is an immutable value which gets updated between calls.

How exponentiation? ie x^n

(define (exp b n)
  (if (= n 0) 1
    (* b (exp (- n 1)))))

Iterative:

(define (exp b n)
  (define (e-iter b n acc)
     (if (= n 0) acc
        (exp b (- n 1) (* acc b))))
  (e-iter b n 1))

OK moving onto the slightly more complex - fibonacci:

(define (fib n)
   (if (< n 2) n
     (+ (fib (- n 1)) (fib (- n 2))))) 

Iterative:

This one is trickier so lets look at some example iterations:
 
fib(0) = 0
fib(1) = 1
fib(2) = fib(1) + fib(0) = 1 + 0 = 1
fib(3) = fib(2) + fib(1) = 1 + 1 = 2
fib(4) = fib(3) + fib(2) = 2 + 1 = 3
fib(5) = fib(4) + fib(3) = 3 + 2 = 5

If we calculate upwards towards n, if we are on fib(n) we need to keep track of fib(n-1) and (fib(n-2).  
We can store that in an a and b variable.  But we will also need a counter to count up to n or actually 
shown here counting down from n to zero.

(define (fibi n)
  (define (f-iter a b count)
    (if (= count 0) b
      (f-iter (+ a b) a (- count 1))))
  (f-iter 1 0 n))
 
This time we don't use an accumulator as such instead we save the previous two fib values as a and b.  
We also need a counter so we know how many iterations to perform.

Now lets see if we can tackle the book problem.

f(n) = n if n < 3 and f(n) = f(n-1) + 2f(n-2) + 3f(n-3) if n >= 3

;recursive solution
(define (f n)
  (if(< n 3) n
     (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))))

Results:
f(1) = 1
f(2) = 2
f(3) = 4
f(4) = 11
f(5) = 25
f(6) = 59
f(7) = 142
f(8) = 335
f(9) = 796
f(10) = 1892

We can use the ideas from the fib example to save the history.  But this time, because we 
add f(n-1) + 2f(n-2) + 3f(n-3) so we need three variables for that.  Plus a counter.

(define (fi n)
  (if (< n 3) n
      (fi-iter 2 1 0 n)))

(define (fi-iter a b c count)
  (if (< count 3) a
      (fi-iter (+ a (* 2 b) (* 3 c)) a b (- count 1))))


We already know from the results above that f(0) = 0, f(1)= 1, f(2) = 2 so we call fi-iter by using 
these starting values, ie (fi-iter 2 1 0 n).

Note how the 'history' is saved across function invocations.

eg:

(fi-iter 2 1 0 5)

in body a = 2, b = 1, c = 0, n = 5

When fi-iter is recursively called again the params become:

(fi-iter 4 2 1 4)  

the new a is the result using the a, b, c in (+ a (* 2 b) (* 3 c))
the new b is the old a
the new c is the old b
count is decremented to 4

Use the Racket debugger to step through each iteration.

Then:
(fi-iter 11 4 2 3)
(fi-iter 25 11 4 2)


Ex 1.12 Pascal Triangle problem. Write a procedure that computes elements of Pascal's triangle by means of a recursive process.

The first hurdle is to work out the function signature.  Well Pascal's triangle is made up of rows and columns so it would be logical to write the functions: (pascal row col)

At first glance this problem looks tricky so first task is to research Pascal's triangle.  After a revision session on the maths, topics like binomial expansion, nCr, working out the chances of getting HHT, etc came back to me.

For example, what are the chances of getting HHT when you throw a dice 3 times.  To work this out you can look at Pascals triangle at the row 1 3 3 1.  This row can be interpretted as:

all heads, 1 head & 2 tails, 2 heads & 1 tail, all tails 

all heads can only be 1 way :- HHH (same for all tails)

But 1 head can be :- HTT, THT, TTH - 3 times.

Note that this is row 3 if the first row is the 0th row.  

0th row because:
row 0 ->  1  -> (1+n)^0
row 1 -> 1 1 -> (1+n)^1
etc

We can use the same cardinal numbering for columns.  ie col numbering will start from zero.

In addition to using Pascal's triangle, you can also calculate the values using the nCr formula.  So one way to implement a solution is to use the nCr formula which is:

nCr = n! / (r! (n-r)!)

We already have a factorial function so we can use that.

Here is the code:

(define (fact n)
  (define (fact-iter a cnt)
    (if (= cnt 0)
        a
        (fact-iter (* a cnt) (dec cnt))))
  (fact-iter 1 n))

(define (pascal row col)
  (/ (fact row) (* (fact col) (fact (- row col))))) 


We can also hide fact inside pascal:

(define (pascal2 row col)
   (define (fact n)
     (define (fact-iter a cnt)
       (if (= cnt 0)
           a
           (fact-iter (* a cnt) (dec cnt))))
     (fact-iter 1 n))  
   (define (pasc r c)
      (/ (fact r) (* (fact c) (fact (- r c)))))
   (pasc row col))


Ahh, just re-read question.  It says using a recursive process!  My factorial above uses an iterative process.  
so to make the example above less efficient we can change to a simpler factorial function as in:

(define (pascal3 row col)
   (define (fact n)
     (if (< n 2) 1
       (* n (fact (- n 1)))))
   (define (pasc r c)
      (/ (fact r) (* (fact c) (fact (- r c)))))
   (pasc row col))



